#+title: cape.el - Let your completions fly!
#+author: Daniel Mendler
#+language: en
#+export_file_name: cape.texi
#+texinfo_dir_category: Emacs
#+texinfo_dir_title: Cape: (cape).
#+texinfo_dir_desc: Completion At Point Extensions

#+html: <a href="https://melpa.org/#/cape"><img alt="MELPA" src="https://melpa.org/packages/cape-badge.svg"/></a>
#+html: <a href="https://stable.melpa.org/#/cape"><img alt="MELPA Stable" src="https://stable.melpa.org/packages/cape-badge.svg"/></a>
#+html: <img src="https://upload.wikimedia.org/wikipedia/en/3/35/Supermanflying.png" align="right">

* Introduction

Cape provides a bunch of Completion At Point Extensions which can be used in
combination with my [[https://github.com/minad/corfu][Corfu]] completion UI or the default completion UI. You can
register the ~cape-*-capf~ functions in the ~completion-at-point-functions~ list.
This makes the corresponding completion backends available to the
~completion-at-point~ command, which is usually invoked by pressing ~TAB~ or ~M-TAB~.
Furthermore there are a handful of dedicated completion commands ~cape-*~, which
you can bind directly to a key in your user configuration.

* Configuration

Cape is available from MELPA. In the long term some of the Capfs provided by
this package should be upstreamed into Emacs itself.

#+begin_src emacs-lisp
  ;; Enable Corfu completion UI
  ;; See the Corfu README for more configuration tips.
  (use-package corfu
    :init
    (corfu-global-mode))

  ;; Add extensions
  (use-package cape
    ;; Bind dedicated completion commands
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p d" . dabbrev-completion)  ;; dabbrev
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p a" . cape-abbrev)
           ("C-c p s" . cape-ispell)
           ("C-c p w" . cape-dict))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file-capf)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev-capf)
    (add-to-list 'completion-at-point-functions #'cape-keyword-capf)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev-capf)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell-capf)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict-capf)
  )
#+end_src

* Company adapter

Cape provides an adapter for Company backends ~cape-company-to-capf~. The adapter
transforms Company backends to Capfs which are understood by the built-in Emacs
completion mechanism. The adapter is still experimental and may have certain edge
cases. It can be used as follows:

#+begin_src emacs-lsp
  ;; Use Company backends as Capfs!
  (setq-local completion-at-point-functions
    (mapcar #'cape-company-to-capf
      (list #'company-files #'company-ispell #'company-dabbrev)))
#+end_src
